-- This project will be a deep dive into Data Cleaning and Exploratory Data Analysis using SQLite,
-- with a focus on showcasing real-world use cases in order to consolidate and identify important data within a dataset.
-- Part 1 handles Data Cleanup, preparing and standardizing the data to be analyzed in the future.

-- Data Cleaning --
-- 1. Remove Duplicates
-- 2. Standardize Data
-- 3. Cleanup Null or Blank Values
-- 4. Remove Unnecessary Columns/Rows

-- Create Staging Table
CREATE TABLE layoffs_staging (
    company,
    location,
    industry,
    total_laid_off,
    percentage_laid_off,
    date,
    stage,
    country,
    funds_raised_millions
);

SELECT *
FROM layoffs_staging;

-- Insert Data Into Staging Table
INSERT INTO layoffs_staging
SELECT *
FROM layoffs;

-- Remove Duplicates --

-- Find Duplicate Data
WITH duplicates_CTE AS (
    SELECT *,
    ROW_NUMBER() OVER(PARTITION BY company, location, industry, total_laid_off, percentage_laid_off, date, stage, country, funds_raised_millions) AS row_num
    FROM layoffs_staging
)
SELECT *
FROM duplicates_CTE
WHERE row_num > 1;

-- Confirm Duplicate Exists
SELECT *
FROM layoffs_staging
WHERE company = 'Casper';

-- Create New Table That Includes Row Numbers
CREATE TABLE layoffs_staging2 (
    company,
    location,
    industry,
    total_laid_off,
    percentage_laid_off,
    date,
    stage,
    country,
    funds_raised_millions,
    row_num
);

SELECT *
FROM layoffs_staging2;

INSERT INTO layoffs_staging2
SELECT *,
ROW_NUMBER() OVER(PARTITION BY company, location, industry, total_laid_off, percentage_laid_off, date, stage, country, funds_raised_millions) AS row_num
FROM layoffs_staging;

-- Delete Duplicates From New Table
SELECT *
FROM layoffs_staging2
WHERE row_num > 1;

DELETE
FROM layoffs_staging2
WHERE row_num > 1;

-- Standardize Data --

SELECT *
FROM layoffs_staging2;

-- Fix Company Colunmn Names
SELECT company,
TRIM(company)
FROM layoffs_staging2;

UPDATE layoffs_staging2
SET company = TRIM(company);

-- Fix Industry Column Issues
SELECT DISTINCT (industry)
FROM layoffs_staging2
ORDER BY 1;

-- Fix Industry - Crypto
SELECT *
FROM layoffs_staging2
WHERE industry LIKE 'Crypto%';

UPDATE layoffs_staging2
SET industry = 'Crypto'
WHERE industry LIKE 'Crypto%';

-- Fix Industry - NULL and Blank
SELECT *
FROM layoffs_staging2
WHERE company IN (
    SELECT company
    FROM layoffs_staging2
    WHERE industry = 'NULL' OR industry = ''
);

-- Populate Data Where Data in Other Rows Exists
SELECT company,
industry,
(
    SELECT MAX(industry)
    FROM layoffs_staging2 AS companies
    WHERE companies.company = layoffs_staging2.company
) AS correct_industry
FROM layoffs_staging2
WHERE industry = 'NULL' OR industry = '';

UPDATE layoffs_staging2
SET industry = (
    SELECT MAX(industry)
    FROM layoffs_staging2 AS companies
    WHERE companies.company = layoffs_staging2.company
)
WHERE industry = 'NULL' OR industry = '';

SELECT * 
FROM layoffs_staging2 
WHERE industry = 'NULL' OR industry = '';

-- Check and Fix Location Column
SELECT DISTINCT location
FROM layoffs_staging2
ORDER BY 1;

SELECT *
FROM layoffs_staging2
WHERE location LIKE '%sseldorf'
OR location LIKE 'Florian%'
OR location LIKE 'Malm%';

UPDATE layoffs_staging2
SET location = 'Dusseldorf'
WHERE location LIKE '%sseldorf';

UPDATE layoffs_staging2
SET location = 'Florian√≥polis'
WHERE location LIKE 'Florian%';

UPDATE layoffs_staging2
SET location = 'Malmo'
WHERE location LIKE 'Malm%';

-- Fix Country Column
SELECT DISTINCT country
FROM layoffs_staging2
ORDER BY 1;

SELECT *
FROM layoffs_staging2
WHERE country = 'United States.';

UPDATE layoffs_staging2
SET country = 'United States'
WHERE country = 'United States.';

-- Check Stage Column
SELECT DISTINCT stage
FROM layoffs_staging2
ORDER BY 1;

SELECT *
FROM layoffs_staging2
WHERE stage = 'NULL';
-- All companies with stage = 'NULL' are separate, unique companies so no need to cleanup this column

-- Remove Unnecessary Columns/Rows --
SELECT *
FROM layoffs_staging2
WHERE total_laid_off = 'NULL'
AND percentage_laid_off = 'NULL';

DELETE
FROM layoffs_staging2
WHERE total_laid_off = 'NULL'
AND percentage_laid_off = 'NULL';

ALTER TABLE layoffs_staging2
DROP COLUMN row_num;
